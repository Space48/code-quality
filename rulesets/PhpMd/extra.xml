<?xml version="1.0"?>

<ruleset name="Space48 Coding Standard Extra"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

    <rule ref="rulesets/naming.xml" >
        <exclude name="LongVariable" />
        <exclude name="ShortMethodName" />
    </rule>

    <rule ref="rulesets/cleancode.xml" >
        <exclude name="BooleanArgumentFlag" />
        <exclude name="ElseExpression" />
        <exclude name="StaticAccess" />
        <exclude name="MissingImport" />
    </rule>

    <rule name="ExcessiveParameterList"
          since="0.1"
          message="The {0} {1} has {2} parameters. Consider reducing the number of parameters to less than {3}."
          class="Space48\CodeQuality\RuleSets\PhpMd\Design\LongParameterList"
          externalInfoUrl="http://phpmd.org/rules/codesize.html#excessiveparameterlist">
        <description>
            Long parameter lists can indicate that a new object should be created to
            wrap the numerous parameters.  Basically, try to group the parameters together.
        </description>
        <priority>3</priority>
        <properties>
            <property name="minimum" description="The parameter count reporting threshold" value="5"/>
            <property name="constructor_minimum" description="reporting threshold for '__construct()'" value="13"/>
        </properties>
        <example>
            <![CDATA[
class Foo {
    public function addData(
        $p0, $p1, $p2, $p3, $p4, $p5,
        $p5, $p6, $p7, $p8, $p9, $p10) {
    }
}
            ]]>
        </example>

    </rule>

    <rule name="UnusedFormalParameter"
          since="0.2"
          message="Avoid unused parameters such as '{0}'."
          class="Space48\CodeQuality\RuleSets\PhpMd\UnusedFormalParameter"
          externalInfoUrl="https://phpmd.org/rules/unusedcode.html#unusedformalparameter">
        <description>
            Avoid passing parameters to methods or constructors and then not using those parameters.
        </description>
        <priority>3</priority>
        <example>
            <![CDATA[
class Foo
{
    private function bar($howdy)
    {
        // $howdy is not used
    }
}
]]>
        </example>
    </rule>

</ruleset>
